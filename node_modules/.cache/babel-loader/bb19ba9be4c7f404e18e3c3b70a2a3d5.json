{"ast":null,"code":"var _jsxFileName = \"/Users/erik.salsborn/Development/multistream/frontend/multistream/src/Register.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\"; // allows us to access the api for register lambda function\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst registerUrl = \"https://hie7efmkul.execute-api.eu-north-1.amazonaws.com/prod/register\"; // This component should act as a way for the user to use Forms to register an account\n\nconst Register = () => {\n  _s();\n\n  document.body.style.backgroundColor = \"#D2D6E6\"; // declaring new state variables for user input and message\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [message, setMessage] = useState(null); //variable with the useNavigate function\n\n  let navigate = useNavigate(); // this function is called when submitting the form\n\n  const submitHandler = event => {\n    // cancels the event if it is cancelable\n    event.preventDefault(); // making sure no fields are empty\n\n    if (username.trim() === \"\" || email.trim() === \"\" || name.trim() === \"\" || password.trim() === \"\") {\n      setMessage(\"All fields are required\");\n      return;\n    } // required for call to server\n\n\n    const requestConfig = {\n      headers: {\n        \"x-api-key\": \"1fJBeucWw45uBdz97bK4t3iio2gHgdjIaR3d9Lmy\"\n      }\n    }; // Information backend needs for register function\n\n    const requestBody = {\n      username: username,\n      email: email,\n      name: name,\n      password: password\n    }; //using axios to send asynchronous HTTP requests to REST endpoints\n\n    axios.post(registerUrl, requestBody, requestConfig).then(response => {\n      setMessage(\"Registeration Successful\");\n      navigate(\"/login\");\n    }).catch(error => {\n      if (error.response.status === 401 || error.response.status === 403) {\n        setMessage(error.response.data.message);\n      } else {\n        setMessage(\"Sorry... The backend server is down. Please try again later.\");\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"split\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"centerimage\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"pngwing.png\",\n        width: \"400\",\n        height: \"400\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"centertop\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: submitHandler,\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Register\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: \"Name\",\n                value: name,\n                onChange: event => setName(event.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 33\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: \"Username\",\n                value: username,\n                onChange: event => setUsername(event.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 33\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: \"Email\",\n                value: email,\n                onChange: event => setEmail(event.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 33\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"password\",\n                placeholder: \"Password\",\n                value: password,\n                onChange: event => setPassword(event.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 33\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"submit\",\n              value: \"Register\",\n              id: \"submit-button\",\n              href: \"/login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"message\",\n          children: [message, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"center\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"Har du redan ett konto?\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            \"data-testid\": \"sign-up-link\",\n            href: \"/login\",\n            tabindex: \"0\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Logga in\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Register, \"HiFJnr7FXG+8wLWfvKNVTxxUtxg=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/erik.salsborn/Development/multistream/frontend/multistream/src/Register.js"],"names":["React","useState","axios","useNavigate","registerUrl","Register","document","body","style","backgroundColor","name","setName","email","setEmail","username","setUsername","password","setPassword","message","setMessage","navigate","submitHandler","event","preventDefault","trim","requestConfig","headers","requestBody","post","then","response","catch","error","status","data","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\nimport axios from \"axios\"\nimport { useNavigate } from \"react-router-dom\"\n\n// allows us to access the api for register lambda function\nconst registerUrl = \"https://hie7efmkul.execute-api.eu-north-1.amazonaws.com/prod/register\"\n\n// This component should act as a way for the user to use Forms to register an account\nconst Register = () => {\n    document.body.style.backgroundColor = \"#D2D6E6\"\n\n    // declaring new state variables for user input and message\n    const [name, setName] = useState(\"\")\n    const [email, setEmail] = useState(\"\")\n    const [username, setUsername] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [message, setMessage] = useState(null)\n\n    //variable with the useNavigate function\n    let navigate = useNavigate()\n\n    // this function is called when submitting the form\n    const submitHandler = (event) => {\n        // cancels the event if it is cancelable\n        event.preventDefault()\n\n        // making sure no fields are empty\n        if (username.trim() === \"\" || email.trim() === \"\" || name.trim() === \"\" || password.trim() === \"\") {\n            setMessage(\"All fields are required\")\n            return\n        }\n\n        // required for call to server\n        const requestConfig = {\n            headers: {\n                \"x-api-key\": \"1fJBeucWw45uBdz97bK4t3iio2gHgdjIaR3d9Lmy\",\n            },\n        }\n\n        // Information backend needs for register function\n        const requestBody = {\n            username: username,\n            email: email,\n            name: name,\n            password: password,\n        }\n\n        //using axios to send asynchronous HTTP requests to REST endpoints\n        axios\n            .post(registerUrl, requestBody, requestConfig)\n            .then((response) => {\n                setMessage(\"Registeration Successful\")\n                navigate(\"/login\")\n            })\n            .catch((error) => {\n                if (error.response.status === 401 || error.response.status === 403) {\n                    setMessage(error.response.data.message)\n                } else {\n                    setMessage(\"Sorry... The backend server is down. Please try again later.\")\n                }\n            })\n    }\n\n    return (\n        <div class=\"split\">\n            <div class=\"centerimage\">\n                <img src=\"pngwing.png\" width=\"400\" height=\"400\" alt=\"logo\"></img>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"centertop\">\n                    <form onSubmit={submitHandler}>\n                        <h5>Register</h5>\n\n                        <div>\n                            <div>\n                                <input type=\"text\" placeholder=\"Name\" value={name} onChange={(event) => setName(event.target.value)} />{\" \"}\n                                <br />\n                            </div>\n\n                            <div>\n                                <input\n                                    type=\"text\"\n                                    placeholder=\"Username\"\n                                    value={username}\n                                    onChange={(event) => setUsername(event.target.value)}\n                                />{\" \"}\n                                <br />\n                            </div>\n\n                            <div>\n                                <input type=\"text\" placeholder=\"Email\" value={email} onChange={(event) => setEmail(event.target.value)} />{\" \"}\n                                <br />\n                            </div>\n\n                            <div>\n                                <input\n                                    type=\"password\"\n                                    placeholder=\"Password\"\n                                    value={password}\n                                    onChange={(event) => setPassword(event.target.value)}\n                                />{\" \"}\n                                <br />\n                            </div>\n                        </div>\n\n                        <div>\n                            <input type=\"submit\" value=\"Register\" id=\"submit-button\" href=\"/login\" />\n                        </div>\n                    </form>\n                    {message && <p className=\"message\">{message} </p>}\n                </div>\n\n                <div class=\"center\">\n                    <p>\n                        {\" \"}\n                        Har du redan ett konto?{\" \"}\n                        <a data-testid=\"sign-up-link\" href=\"/login\" tabindex=\"0\">\n                            <span>Logga in</span>\n                        </a>\n                    </p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Register\n"]},"metadata":{},"sourceType":"module"}