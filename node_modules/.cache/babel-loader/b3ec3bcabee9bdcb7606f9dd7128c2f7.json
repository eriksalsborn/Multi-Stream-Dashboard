{"ast":null,"code":"var _jsxFileName = \"/Users/erik.salsborn/Development/multistream/frontend/multistream/src/Layouts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getUser, getToken, resetUserSession } from \"./AuthService\";\nimport axios from \"axios\";\nimport CreateWindow from \"./CreateWindow\";\nimport { slide as Menu } from \"react-burger-menu\"; // allows us to access the api\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst saveLayoutsUrl = \"https://hie7efmkul.execute-api.eu-north-1.amazonaws.com/prod/savelayouts\";\nconst getLayoutsUrl = \"https://hie7efmkul.execute-api.eu-north-1.amazonaws.com/prod/getlayouts\";\n\nconst Layouts = () => {\n  _s();\n\n  // get the current user + name + token\n  const user = getUser();\n  const name = user.name;\n  const token = getToken(); // declaring new state variables\n\n  const [windows, setWindows] = useState([]); // windows contains information about each streaming window - url, size etc..\n\n  const [appInitiated, setAppInitiated] = useState(false); // used for keeping track if we should GET or SAVE windows\n\n  const [inputText, setInputText] = useState(\"\"); // used in forms\n\n  const [message, setMessage] = useState(null); // used for error messages\n\n  const [currentLayout, setCurrentLayout] = useState(\"\"); //  used for keeping information about the layout of windows\n\n  const [darkmode, setDarkmode] = useState(false); // used for keeping track if we are using dark mode or not\n  // hook that runs after each render / when state variable window is updated\n\n  useEffect(() => {\n    // If - appInitiated is true (meaning we have are already on the component)- then we want to update SAVE windows to the database\n    if (appInitiated) {\n      // required for call to server\n      const requestConfig = {\n        headers: {\n          \"x-api-key\": \"1fJBeucWw45uBdz97bK4t3iio2gHgdjIaR3d9Lmy\"\n        }\n      }; // what we want to send (post) to the server lambda function\n\n      const requestBody = {\n        username: user.username,\n        url: inputText,\n        token: token\n      }; // server call SAVE\n\n      axios.post(saveLayoutsUrl, {\n        windows: windows,\n        username: user.username,\n        token: token\n      }, requestConfig).then(response => {//setMessage(\"Layouts Saved Successfully\");\n      }).catch(error => {\n        if (error.response.status === 401 || error.response.status === 403) {\n          setMessage(error.response.data.message);\n        }\n      }); // ELSE - if appInitiated is true (meaning we just arrived to the component) we want to GET the windows in the database for the user\n    } else {\n      // hiding some elements as default\n      document.getElementById(\"form\").style.display = \"none\";\n      document.getElementById(\"formtwitch\").style.display = \"none\";\n      document.getElementById(\"dropdown_switch\").style.display = \"none\"; // fetch data\n\n      const requestConfig = {\n        headers: {\n          \"x-api-key\": \"1fJBeucWw45uBdz97bK4t3iio2gHgdjIaR3d9Lmy\"\n        }\n      };\n      const requestBody = {\n        username: user.username,\n        token: token\n      }; // server call GET\n\n      axios.post(getLayoutsUrl, requestBody, requestConfig).then(response => {\n        setWindows(response.data.layouts);\n      }).catch(error => {\n        if (error.response.status === 401 || error.response.status === 403) {\n          setMessage(error.response.data.message);\n        }\n      });\n      setAppInitiated(true);\n    }\n  }, [windows]);\n  let navigate = useNavigate();\n\n  const logoutHandler = () => {\n    resetUserSession();\n    navigate(\"/login\");\n  };\n\n  const darkMode = () => {\n    const darkorlight = document.getElementById(\"darkmode_button\");\n\n    if (darkmode === false) {\n      document.body.style.backgroundColor = \"#000033\";\n      darkorlight.value = \"Light Mode\";\n      setDarkmode(true);\n    } else {\n      document.body.style.backgroundColor = \"#D2D6E6\";\n      darkorlight.value = \"Dark Mode\";\n      setDarkmode(false);\n    }\n  }; // Function for hiding form on click - Youtube\n\n\n  const hideFormYT = () => {\n    const form = document.getElementById(\"form\");\n    const formtwitch = document.getElementById(\"formtwitch\");\n    const forminput = document.getElementById(\"forminput\");\n    const formtwitchinput = document.getElementById(\"formtwitchinput\");\n\n    if (form.style.display === \"none\") {\n      // Show\n      form.style.display = \"block\";\n\n      if (formtwitch.style.display === \"block\") {\n        formtwitch.style.display = \"none\";\n      }\n    } else {\n      // Hide\n      form.style.display = \"none\";\n    }\n\n    forminput.value = \"\";\n    formtwitchinput.value = \"\";\n  }; // Function for hiding form on click - Twitch\n\n\n  const hideFormTW = () => {\n    const form = document.getElementById(\"form\");\n    const formtwitch = document.getElementById(\"formtwitch\");\n    const forminput = document.getElementById(\"forminput\");\n    const formtwitchinput = document.getElementById(\"formtwitchinput\");\n\n    if (formtwitch.style.display === \"none\") {\n      // show\n      formtwitch.style.display = \"block\";\n\n      if (form.style.display === \"block\") {\n        form.style.display = \"none\";\n      }\n    } else {\n      // hide\n      formtwitch.style.display = \"none\";\n    }\n\n    forminput.value = \"\";\n    formtwitchinput.value = \"\";\n  };\n\n  const hideLayoutDropdown = () => {\n    const dropdown = document.getElementById(\"dropdown_switch\");\n\n    if (dropdown.style.display === \"none\") {\n      // show\n      dropdown.style.display = \"block\";\n    } else {\n      // hide\n      dropdown.style.display = \"none\";\n    }\n  }; // Function for displaying a prompt for user to input new layout name\n\n\n  const addLayoutPrompt = () => {\n    const dropdown = document.getElementById(\"dropdown_switch\");\n    let sign = prompt(\"What do you want your new layout to be called?\"); // hide\n\n    dropdown.style.display = \"none\"; // if user presses cancel or if user doesnt provide a name..\n\n    if (sign === null || sign === \"\") {\n      return; //break\n    }\n\n    setCurrentLayout(sign);\n  }; // Function for handling (adding) a new youtube-window\n\n\n  const submitHandlerYT = event => {\n    event.preventDefault();\n\n    if (inputText.trim() === \"\") {\n      setMessage(\"All fields are required\");\n      return;\n    }\n\n    let channel_name = inputText;\n    channel_name = channel_name.substr(32);\n    const src = \"https://www.youtube.com/embed/\" + channel_name;\n    const newState = [...windows, {\n      url: src,\n      width: 407,\n      height: 228,\n      x: 100,\n      y: 100,\n      scale: 1.0,\n      layout: currentLayout\n    }];\n    hideFormYT();\n    setInputText(\"\");\n    setWindows(newState);\n  }; // Function for handling (adding) a new twitch-window\n\n\n  const submitHandlerTW = event => {\n    event.preventDefault();\n\n    if (inputText.trim() === \"\") {\n      setMessage(\"All fields are required\");\n      return;\n    }\n\n    let channel_name = inputText;\n    const src = \"https://player.twitch.tv/?channel=\" + channel_name + \"&parent=localhost&muted=true\";\n    const newState = [...windows, {\n      url: src,\n      width: 407,\n      height: 228,\n      x: 100,\n      y: 100,\n      scale: 1.0,\n      layout: currentLayout\n    }];\n    hideFormTW();\n    setInputText(\"\");\n    setWindows(newState);\n  }; // Function for removing a window\n\n\n  const handleClose = toClose => {\n    setWindows(windows.filter(a => a.url !== toClose.url));\n  }; // Function for handling dragging a window\n\n\n  const handleDrag = (toDrag, dx, dy) => {\n    toDrag.x = dx;\n    toDrag.y = dy;\n    setWindows(windows.map(a => a.url !== toDrag.url ? a : toDrag));\n  }; // Function for handling resizing of a window\n\n\n  const handleResize = (toResize, width, height, position) => {\n    toResize.height = height;\n    toResize.width = width;\n    toResize.x = position.x;\n    toResize.y = position.y;\n    setWindows(windows.map(a => a.url !== toResize.url ? a : toResize));\n  }; // Retrieving all layout names of windows\n\n\n  const windowNames = windows.map(i => i.layout); // Retrieving all uniquee layout names of windows\n\n  const unique = new Array(...new Set([...windowNames])); // To be used in the dropdown for selecting layout\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Menu, {\n      right: true,\n      noOverlay: true,\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: [\" Welcome, \", user.name, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \" Add a stream \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"border\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"image\",\n          src: \"youtube_logo.png\",\n          height: \"68\",\n          onClick: hideFormYT\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"form\",\n        onSubmit: submitHandlerYT,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"forminput\",\n          type: \"text\",\n          placeholder: \"YouTube URL\",\n          value: inputText,\n          onChange: event => {\n            setInputText(event.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 21\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"button-overlay-green\",\n          type: \"submit\",\n          value: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"border\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"image\",\n          src: \"twitch_logo.png\",\n          height: \"78\",\n          onClick: hideFormTW\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"formtwitch\",\n        onSubmit: submitHandlerTW,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"formtwitchinput\",\n          type: \"text\",\n          placeholder: \"Twitch Channel Name\",\n          value: inputText,\n          onChange: event => {\n            setInputText(event.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 21\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"button-overlay-green\",\n          type: \"submit\",\n          value: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"button-overlay\",\n        type: \"button\",\n        value: \"Switch Layout\",\n        onClick: hideLayoutDropdown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"dropdown_switch\",\n        value: currentLayout,\n        onChange: e => setCurrentLayout(e.target.value),\n        children: unique.map(i => /*#__PURE__*/_jsxDEV(\"option\", {\n          children: i\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"button-overlay\",\n        type: \"button\",\n        value: \"Add New Layout\",\n        onClick: addLayoutPrompt\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"darkmode_button\",\n        type: \"button\",\n        value: \"Dark Mode\",\n        onClick: darkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"button-overlay\",\n        type: \"button\",\n        value: \"Logout\",\n        onClick: logoutHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 13\n    }, this), windows.map(windows => /*#__PURE__*/_jsxDEV(CreateWindow, {\n      data: windows,\n      layout: currentLayout,\n      onDrag: handleDrag,\n      onClose: handleClose,\n      onResize: handleResize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 17\n    }, this)), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"message\",\n      children: [message, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 281,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Layouts, \"gOR3lT9PfNMbLEymHUAIHgy9azQ=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Layouts;\nexport default Layouts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Layouts\");","map":{"version":3,"sources":["/Users/erik.salsborn/Development/multistream/frontend/multistream/src/Layouts.js"],"names":["React","useEffect","useState","useNavigate","getUser","getToken","resetUserSession","axios","CreateWindow","slide","Menu","saveLayoutsUrl","getLayoutsUrl","Layouts","user","name","token","windows","setWindows","appInitiated","setAppInitiated","inputText","setInputText","message","setMessage","currentLayout","setCurrentLayout","darkmode","setDarkmode","requestConfig","headers","requestBody","username","url","post","then","response","catch","error","status","data","document","getElementById","style","display","layouts","navigate","logoutHandler","darkMode","darkorlight","body","backgroundColor","value","hideFormYT","form","formtwitch","forminput","formtwitchinput","hideFormTW","hideLayoutDropdown","dropdown","addLayoutPrompt","sign","prompt","submitHandlerYT","event","preventDefault","trim","channel_name","substr","src","newState","width","height","x","y","scale","layout","submitHandlerTW","handleClose","toClose","filter","a","handleDrag","toDrag","dx","dy","map","handleResize","toResize","position","windowNames","i","unique","Array","Set","target","e"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { useNavigate } from \"react-router-dom\"\nimport { getUser, getToken, resetUserSession } from \"./AuthService\"\nimport axios from \"axios\"\nimport CreateWindow from \"./CreateWindow\"\nimport { slide as Menu } from \"react-burger-menu\"\n\n// allows us to access the api\nconst saveLayoutsUrl = \"https://hie7efmkul.execute-api.eu-north-1.amazonaws.com/prod/savelayouts\"\nconst getLayoutsUrl = \"https://hie7efmkul.execute-api.eu-north-1.amazonaws.com/prod/getlayouts\"\n\nconst Layouts = () => {\n    // get the current user + name + token\n    const user = getUser()\n    const name = user.name\n    const token = getToken()\n\n    // declaring new state variables\n    const [windows, setWindows] = useState([]) // windows contains information about each streaming window - url, size etc..\n    const [appInitiated, setAppInitiated] = useState(false) // used for keeping track if we should GET or SAVE windows\n    const [inputText, setInputText] = useState(\"\") // used in forms\n    const [message, setMessage] = useState(null) // used for error messages\n    const [currentLayout, setCurrentLayout] = useState(\"\") //  used for keeping information about the layout of windows\n    const [darkmode, setDarkmode] = useState(false) // used for keeping track if we are using dark mode or not\n\n    // hook that runs after each render / when state variable window is updated\n    useEffect(() => {\n        // If - appInitiated is true (meaning we have are already on the component)- then we want to update SAVE windows to the database\n        if (appInitiated) {\n            // required for call to server\n            const requestConfig = {\n                headers: {\n                    \"x-api-key\": \"1fJBeucWw45uBdz97bK4t3iio2gHgdjIaR3d9Lmy\",\n                },\n            }\n\n            // what we want to send (post) to the server lambda function\n            const requestBody = {\n                username: user.username,\n                url: inputText,\n                token: token,\n            }\n\n            // server call SAVE\n            axios\n                .post(\n                    saveLayoutsUrl,\n                    {\n                        windows: windows,\n                        username: user.username,\n                        token: token,\n                    },\n                    requestConfig\n                )\n                .then((response) => {\n                    //setMessage(\"Layouts Saved Successfully\");\n                })\n                .catch((error) => {\n                    if (error.response.status === 401 || error.response.status === 403) {\n                        setMessage(error.response.data.message)\n                    }\n                })\n\n            // ELSE - if appInitiated is true (meaning we just arrived to the component) we want to GET the windows in the database for the user\n        } else {\n            // hiding some elements as default\n            document.getElementById(\"form\").style.display = \"none\"\n            document.getElementById(\"formtwitch\").style.display = \"none\"\n            document.getElementById(\"dropdown_switch\").style.display = \"none\"\n\n            // fetch data\n            const requestConfig = {\n                headers: {\n                    \"x-api-key\": \"1fJBeucWw45uBdz97bK4t3iio2gHgdjIaR3d9Lmy\",\n                },\n            }\n            const requestBody = {\n                username: user.username,\n                token: token,\n            }\n\n            // server call GET\n            axios\n                .post(getLayoutsUrl, requestBody, requestConfig)\n                .then((response) => {\n                    setWindows(response.data.layouts)\n                })\n                .catch((error) => {\n                    if (error.response.status === 401 || error.response.status === 403) {\n                        setMessage(error.response.data.message)\n                    }\n                })\n\n            setAppInitiated(true)\n        }\n    }, [windows])\n\n    let navigate = useNavigate()\n    const logoutHandler = () => {\n        resetUserSession()\n        navigate(\"/login\")\n    }\n\n    const darkMode = () => {\n        const darkorlight = document.getElementById(\"darkmode_button\")\n\n        if (darkmode === false) {\n            document.body.style.backgroundColor = \"#000033\"\n            darkorlight.value = \"Light Mode\"\n            setDarkmode(true)\n        } else {\n            document.body.style.backgroundColor = \"#D2D6E6\"\n            darkorlight.value = \"Dark Mode\"\n            setDarkmode(false)\n        }\n    }\n\n    // Function for hiding form on click - Youtube\n    const hideFormYT = () => {\n        const form = document.getElementById(\"form\")\n        const formtwitch = document.getElementById(\"formtwitch\")\n        const forminput = document.getElementById(\"forminput\")\n        const formtwitchinput = document.getElementById(\"formtwitchinput\")\n\n        if (form.style.display === \"none\") {\n            // Show\n            form.style.display = \"block\"\n            if (formtwitch.style.display === \"block\") {\n                formtwitch.style.display = \"none\"\n            }\n        } else {\n            // Hide\n            form.style.display = \"none\"\n        }\n\n        forminput.value = \"\"\n        formtwitchinput.value = \"\"\n    }\n\n    // Function for hiding form on click - Twitch\n    const hideFormTW = () => {\n        const form = document.getElementById(\"form\")\n        const formtwitch = document.getElementById(\"formtwitch\")\n        const forminput = document.getElementById(\"forminput\")\n        const formtwitchinput = document.getElementById(\"formtwitchinput\")\n\n        if (formtwitch.style.display === \"none\") {\n            // show\n            formtwitch.style.display = \"block\"\n            if (form.style.display === \"block\") {\n                form.style.display = \"none\"\n            }\n        } else {\n            // hide\n            formtwitch.style.display = \"none\"\n        }\n\n        forminput.value = \"\"\n        formtwitchinput.value = \"\"\n    }\n\n    const hideLayoutDropdown = () => {\n        const dropdown = document.getElementById(\"dropdown_switch\")\n\n        if (dropdown.style.display === \"none\") {\n            // show\n            dropdown.style.display = \"block\"\n        } else {\n            // hide\n            dropdown.style.display = \"none\"\n        }\n    }\n\n    // Function for displaying a prompt for user to input new layout name\n    const addLayoutPrompt = () => {\n        const dropdown = document.getElementById(\"dropdown_switch\")\n\n        let sign = prompt(\"What do you want your new layout to be called?\")\n        // hide\n        dropdown.style.display = \"none\"\n\n        // if user presses cancel or if user doesnt provide a name..\n        if (sign === null || sign === \"\") {\n            return //break\n        }\n\n        setCurrentLayout(sign)\n    }\n\n    // Function for handling (adding) a new youtube-window\n    const submitHandlerYT = (event) => {\n        event.preventDefault()\n\n        if (inputText.trim() === \"\") {\n            setMessage(\"All fields are required\")\n            return\n        }\n\n        let channel_name = inputText\n        channel_name = channel_name.substr(32)\n\n        const src = \"https://www.youtube.com/embed/\" + channel_name\n\n        const newState = [\n            ...windows,\n            {\n                url: src,\n                width: 407,\n                height: 228,\n                x: 100,\n                y: 100,\n                scale: 1.0,\n                layout: currentLayout,\n            },\n        ]\n\n        hideFormYT()\n        setInputText(\"\")\n        setWindows(newState)\n    }\n\n    // Function for handling (adding) a new twitch-window\n    const submitHandlerTW = (event) => {\n        event.preventDefault()\n\n        if (inputText.trim() === \"\") {\n            setMessage(\"All fields are required\")\n            return\n        }\n\n        let channel_name = inputText\n        const src = \"https://player.twitch.tv/?channel=\" + channel_name + \"&parent=localhost&muted=true\"\n\n        const newState = [\n            ...windows,\n            {\n                url: src,\n                width: 407,\n                height: 228,\n                x: 100,\n                y: 100,\n                scale: 1.0,\n                layout: currentLayout,\n            },\n        ]\n\n        hideFormTW()\n        setInputText(\"\")\n        setWindows(newState)\n    }\n\n    // Function for removing a window\n    const handleClose = (toClose) => {\n        setWindows(windows.filter((a) => a.url !== toClose.url))\n    }\n\n    // Function for handling dragging a window\n    const handleDrag = (toDrag, dx, dy) => {\n        toDrag.x = dx\n        toDrag.y = dy\n        setWindows(windows.map((a) => (a.url !== toDrag.url ? a : toDrag)))\n    }\n\n    // Function for handling resizing of a window\n    const handleResize = (toResize, width, height, position) => {\n        toResize.height = height\n        toResize.width = width\n        toResize.x = position.x\n        toResize.y = position.y\n\n        setWindows(windows.map((a) => (a.url !== toResize.url ? a : toResize)))\n    }\n\n    // Retrieving all layout names of windows\n    const windowNames = windows.map((i) => i.layout)\n    // Retrieving all uniquee layout names of windows\n    const unique = new Array(...new Set([...windowNames]))\n    // To be used in the dropdown for selecting layout\n\n    return (\n        <div>\n            <Menu right noOverlay>\n                <h5> Welcome, {user.name} </h5>\n                <h5> Add a stream </h5>\n\n                <div id=\"border\">\n                    <input type=\"image\" src=\"youtube_logo.png\" height=\"68\" onClick={hideFormYT} />\n                </div>\n\n                <form id=\"form\" onSubmit={submitHandlerYT}>\n                    <input\n                        id=\"forminput\"\n                        type=\"text\"\n                        placeholder=\"YouTube URL\"\n                        value={inputText}\n                        onChange={(event) => {\n                            setInputText(event.target.value)\n                        }}\n                    />{\" \"}\n                    <input id=\"button-overlay-green\" type=\"submit\" value=\"Add\" />\n                </form>\n\n                <div id=\"border\">\n                    <input type=\"image\" src=\"twitch_logo.png\" height=\"78\" onClick={hideFormTW} />\n                </div>\n\n                <form id=\"formtwitch\" onSubmit={submitHandlerTW}>\n                    <input\n                        id=\"formtwitchinput\"\n                        type=\"text\"\n                        placeholder=\"Twitch Channel Name\"\n                        value={inputText}\n                        onChange={(event) => {\n                            setInputText(event.target.value)\n                        }}\n                    />{\" \"}\n                    <br />\n                    <input id=\"button-overlay-green\" type=\"submit\" value=\"Add\" />\n                </form>\n\n                <input id=\"button-overlay\" type=\"button\" value=\"Switch Layout\" onClick={hideLayoutDropdown} />\n                <select id=\"dropdown_switch\" value={currentLayout} onChange={(e) => setCurrentLayout(e.target.value)}>\n                    {unique.map((i) => (\n                        <option>{i}</option>\n                    ))}\n                </select>\n\n                <input id=\"button-overlay\" type=\"button\" value=\"Add New Layout\" onClick={addLayoutPrompt} />\n                <input id=\"darkmode_button\" type=\"button\" value=\"Dark Mode\" onClick={darkMode} />\n                <input id=\"button-overlay\" type=\"button\" value=\"Logout\" onClick={logoutHandler} />\n            </Menu>\n\n            {windows.map((windows) => (\n                <CreateWindow\n                    data={windows}\n                    layout={currentLayout}\n                    onDrag={handleDrag}\n                    onClose={handleClose}\n                    onResize={handleResize}\n                ></CreateWindow>\n            ))}\n            {message && <p className=\"message\">{message} </p>}\n        </div>\n    )\n}\n\nexport default Layouts\n"]},"metadata":{},"sourceType":"module"}